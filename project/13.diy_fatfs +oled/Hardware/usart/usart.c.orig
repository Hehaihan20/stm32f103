#include "usart.h"
#include <stdio.h>
#include <string.h>

#if EN_USART1_RX   //如果使能了接收
//串口1中断服务程序
//注意,读取USARTx->SR能避免莫名其妙的错误   	
u8 USART_RX_BUF[USART_REC_LEN];     //接收缓冲,最大USART_REC_LEN个字节.

u16 USART_RX_STA=0;       //接收状态标记	  
#endif

void usart_init(u32 bound){
	//GPIO端口设置
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	RCC_APB2PeriphClockCmd(USART1_GPIO_RCC|USART1_RCC, ENABLE);	//使能USART1，GPIOA时钟
	
	//USART1_TX   GPIOA.9
	GPIO_InitStructure.GPIO_Pin=USART1_TX_PIN;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;
	GPIO_Init(USART1_GPIO,&GPIO_InitStructure);
	//USART1_RX	  GPIOA.10初始化
	GPIO_InitStructure.GPIO_Pin=UASRT1_RX_PIN;
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;
	GPIO_Init(USART1_GPIO, &GPIO_InitStructure);//初始化GPIOA.10 
	
	//param
	USART_InitStructure.USART_BaudRate=bound;
	USART_InitStructure.USART_WordLength=USART_WordLength_8b;
	USART_InitStructure.USART_StopBits=USART_StopBits_1;
	USART_InitStructure.USART_Parity=USART_Parity_No;//无奇偶校验位
	USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;//无硬件数据流控制
	USART_InitStructure.USART_Mode=USART_Mode_Rx | USART_Mode_Tx;	
  USART_Init(USART1, &USART_InitStructure); //初始化串口1
	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);//开启RXNE标志位到NVIC的输出

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//NVIC分组
	NVIC_InitStructure.NVIC_IRQChannel=USART1_IRQn;	
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1;//抢占优先级
	NVIC_InitStructure.NVIC_IRQChannelSubPriority=1;//响应优先级
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
	
	NVIC_Init(&NVIC_InitStructure);
  USART_Cmd(USART1, ENABLE);                    //使能串口1 
}


int fputc(int ch, FILE *f)
{      
	while((USART1->SR&0X40)==0);//循环发送,直到发送完毕   
	USART1->DR = (u8) ch;      
	return ch;


}
uint8_t hexCharToByte(char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    } else if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    } else if (c >= 'a' && c <= 'f') {
        return c - 'a' + 10;
    }
    return 0; // 非法字符，可以根据需要处理
}


void USART1_IRQHandler(void)                	//串口1中断服务程序
{
	
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断
		{
		   uint8_t Serial_RxData =USART_ReceiveData(USART1);	//读取接收到的数据	
			USART_ClearITPendingBit(USART1,USART_IT_RXNE);
		
			if (USART_RX_STA < USART_REC_LEN)
        {
            USART_RX_BUF[USART_RX_STA] = Serial_RxData;
					
            USART_RX_STA++;
					
					  // 检查是否收到字符串结束符 '\n'
					if(Serial_RxData==' '){
					     return; //忽略空格
					
					}else if(Serial_RxData==','){
						  if (dataLength > 0) {
                Recive_data(Data[dataLength - 1]); // 存储上一个字节
            }
					
					}
            if (Serial_RxData == '\n')
            {
                USART_RX_BUF[USART_RX_STA] = '\0'; // 添加字符串结束符
               // printf("Received String: %s\r\n", USART_RX_BUF);
                 // 打印每个字节的十六进制值
                for (int i = 0; i < USART_RX_STA; i++)
                {
                    uint8_t hexValue = hexCharToByte(USART_RX_BUF[i]);
                    printf("Byte %d: 0x%02X\r\n", i, hexValue);
                }
					
                // 清空缓冲区和计数器
			          memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
                USART_RX_STA = 0;
            }
        }
			  
			}  		 
    
    
} 






